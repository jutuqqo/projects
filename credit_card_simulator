#Credit Card Simulator
def initialize():
  global last_day, last_month
  global c1, c2, c3
  global amount, month, country
  global owing_intst, owing_recent, tot
  global is_deactivated  
  
  
  is_deactivated = False
  owing_intst = 0
  owing_recent = 0
  tot = 0
  c1 = None
  c2 = None
  c3 = None
  last_day = 0
  last_month = 0
  amount = 0
  

def date_same_or_later(day, month, last_day, last_month):
  if month == last_month and day >= last_day:
    return True
  if month > last_month:
    return True 
  return False 

def all_three_different(c1:str,c2:str,c3:str):   
  if c1 == None or c2 == None or c3 == None:
    return False
  if c1 != c2 and c1 != c3 and c2 != c3 :
    return True 
  return False 

def amount_owed(day,month):
  global last_day,last_month,is_deactivated,owing_recent,owing_intst,tot
  
  # check date 
  if not date_same_or_later(day, month, last_day, last_month):
    return tot
  
  # update recent value corresponds to current date
  i = month - (last_month+1)
  new_recent = 0
  
  # difference between month and last_month is one month
  if i == 0:
    new_recent = owing_recent 
    
  # difference between month and last month is over two months
  if i > 0:
    new_recent = owing_recent * ((1.05)**i)
    owing_recent = 0

  # month = last month
  if i < 0:
    last_month = month 
    last_day = day

  # update interest value corresponds to current date
  if last_month != month:
    owing_intst = owing_intst*(1.05**(month - last_month)) 
    owing_intst += new_recent
    owing_recent = 0
    
  last_month = month 
  last_day = day
  return(owing_recent + owing_intst)

  

def purchase(amount:float,day:int,month:int,country:str):
  # initialize global variable 
  global owing_recent,last_day,last_month,c1,c2,c3,is_deactivated 

  # check activation
  if is_deactivated == True:
    return 'error'
  '''
  # check date 
  day1 = day
  month1 = month
  if not date_same_or_later(day1, month1, day2, month2):
    print ('error')
  day2 = day1
  month2 = month1  
  '''
  
  # check countries 
  c3 = c2 
  c2 = c1
  c1 = country
  if all_three_different(c1,c2,c3) == True:
    is_deactivated = True
    return 'error'

  if last_month ==0 and last_day == 0:
    owing_recent += amount
    #last_day = day
    last_month = month 
    last_day = day
    return owing_recent
    
  # proceed
  # amount owed check 
  else:
    val = amount_owed(day,month)
    owing_recent+=amount
    tot = val+owing_recent
    return tot 
  
def pay_bill(amount,day,month):
  global owing_recent, owing_intst,last_day,last_month
  
  # date check
  if not date_same_or_later(day, month, last_day, last_month):
    print ('error')
    
  # recent and interest should be updated to current month
  val = amount_owed(day,month)

  if val > amount: 
    if amount > owing_intst: #if the amount of money the user is trying to pay back is larger than money that will generate INTEREST but smaller than TOTAL VAL 
      owing_intst -= amount
      owing_recent -= amount
    if amount <= owing_intst: #pay back money is less than interest
      owing_intst -= amount

  elif val <= amount: #pay back money is larger or equal to the money owed
    owing_recent = 0
    owing_intst = 0

if __name__ == "__main__":
  initialize()
  print(purchase(80,8,1,'Canada'))
  print('-----')
  print(amount_owed(8,1))
  print('-----')
  pay_bill(50,2,2)
  print('-----')
  print(amount_owed(2,2))
  print('-----')
  print(amount_owed(6,3))
  print('-----')
  print(purchase(40,6,3,'Canada'))
  print('-----')
  print(amount_owed(6,3))
  print('-----')
  pay_bill(30,7,3)
  print('-----')
  print(amount_owed(7,3))
  print('-----')
  print(purchase(40,2,5,'France'))
  print('-----')
  print(amount_owed(2,5))
  print('-----')
  print(purchase(50,3,5,'United States'))
  print('-----')
  print(amount_owed(3,5))
  print('-----')
  print(purchase(150,3,5,'Canada'))
  print('-----')
  print(amount_owed(1,6))




 

  
